{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItemHandler","trimTitle","trim","addItem","errorMessage","errorStyleForButton","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","fontSize","EditableSpan","editMode","setEditMode","offEditMode","setNewTitle","style","width","autoFocus","onBlur","onDoubleClick","TodoList","tasksJSXElements","tasks","map","task","ListItem","divider","disableGutters","display","className","isDone","id","Checkbox","checked","changeTaskStatus","inputProps","changeTaskTitle","aria-label","removeTask","justifySelf","Delete","Typography","fontWeight","align","changeTodolistTitle","removeTodoList","addTask","List","ButtonGroup","disableElevation","Button","filter","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","taskId","todoListId","t","newTask","tl","AppBar","position","Toolbar","justifyContent","edge","Menu","Container","fixed","Grid","container","padding","newTodoList","spacing","tasksForRender","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fc3781e4.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        const trimTitle = title.trim()\r\n        if (trimTitle) {\r\n            props.addItem(trimTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const changeTitleValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const AddTaskOnEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    const errorMessage = error && 'title is required';\r\n    const errorStyleForButton = error ? 'secondary' : 'primary';\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                size={'small'}\r\n                error={error}\r\n                value={title}\r\n                onChange={changeTitleValueHandler}\r\n                onKeyPress={AddTaskOnEnterHandler}\r\n                label={\"Title\"}\r\n                helperText={errorMessage}\r\n            />\r\n            <IconButton\r\n                onClick={addItemHandler}\r\n                color={errorStyleForButton}\r\n                size={'small'}\r\n            >\r\n                <AddBox fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const changeTitleValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const changeTaskTitleOnEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        props.title && setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                style={{width: 140}}\r\n                value={title}\r\n                autoFocus={true} // after double click focusing on input\r\n                onBlur={offEditMode}\r\n                onChange={changeTitleValueHandler}\r\n                onKeyPress={changeTaskTitleOnEnterHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType> // TaskType []\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTodolistTitle: (title: string, todoListId: string) => void\r\n}\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const filterTasksAll = () => props.changeFilter('all', props.id);\r\n    const filterTasksActive = () => props.changeFilter('active', props.id);\r\n    const filterTasksCompleted = () => props.changeFilter('completed', props.id);\r\n    const removeTodoListHandler = () => {\r\n        props.removeTodoList(props.id)\r\n    };\r\n    const changeTodolistTitleHandler = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n\r\n    const tasksJSXElements = props.tasks.map(task => {\r\n        const removeTask = () => props.removeTask(task.id, props.id)\r\n        const changeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const changeTaskTitleHandler = (title: string) => {\r\n            props.changeTaskTitle(task.id, title, props.id)\r\n        }\r\n        return (\r\n            <ListItem\r\n                divider\r\n                disableGutters\r\n                style={{\r\n                    display: 'flex',\r\n                }}\r\n                className={task.isDone ? \"is-done\" : \"\"}\r\n                key={task.id}\r\n            >\r\n                <Checkbox\r\n                    checked={task.isDone}\r\n                    onChange={changeCheckboxHandler}\r\n                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                />\r\n                <EditableSpan title={task.title} setNewTitle={changeTaskTitleHandler}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTask} style={{justifySelf: 'flex-end'}}>\r\n                    <Delete fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"todoList\">\r\n            <div className={\"todoListTitle\"}>\r\n                <Typography variant={\"h6\"} style={{fontWeight: \"bold\"}} align={\"center\"}>\r\n                    <EditableSpan title={props.title} setNewTitle={changeTodolistTitleHandler}/>\r\n                    <IconButton aria-label=\"delete\" onClick={removeTodoListHandler}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </Typography>\r\n            </div>\r\n\r\n            <AddItemForm addItem={addTaskHandler}/>\r\n\r\n            <List>\r\n                {tasksJSXElements}\r\n            </List>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    disableElevation={true}\r\n                >\r\n                    <Button\r\n                        color={props.filter === \"all\" ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksAll}\r\n                    >All\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === \"active\" ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksActive}\r\n                    >Active\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === \"completed\" ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksCompleted}\r\n                    >Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport function App() {\r\n\r\n    // BLL - business logic layer:\r\n\r\n    const todoListId_1 = v1();\r\n    const todoListId_2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListId_2, title: \"What to buy\", filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n        ],\r\n    })\r\n\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        tasks[todoListId] = tasks[todoListId].filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListId: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false,\r\n        }\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(t => t.id === taskId ? {...t, isDone: isDone} : t)})\r\n    }\r\n    const changeTaskTitle = (taskId: string, title: string, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(t => t.id === taskId ? {...t, title} : t)})\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n    const changeTodolistTitle = (title: string, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, title} : tl))\r\n\r\n    }\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoList: TodoListType = {\r\n            id: v1(),\r\n            title,\r\n            filter: 'all',\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoList.id]: []})\r\n    }\r\n\r\n    // UI:\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n\r\n                        let tasksForRender: Array<TaskType> = tasks[tl.id]\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForRender = tasks[tl.id].filter(t => !t.isDone)\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForRender = tasks[tl.id].filter(t => t.isDone)\r\n                        }\r\n\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper elevation={2} style={{padding: 15}}>\r\n                                    <TodoList\r\n                                        id={tl.id}\r\n                                        filter={tl.filter}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForRender}\r\n                                        removeTask={removeTask}\r\n                                        addTask={addTask}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}